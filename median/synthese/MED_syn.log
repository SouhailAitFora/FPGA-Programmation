
 /----------------------------------------------------------------------------\
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |  Copyright (C) 2012 - 2024  Claire Xenia Wolf <claire@yosyshq.com>         |
 |  Distributed under an ISC-like license, type "license" to see terms        |
 \----------------------------------------------------------------------------/
 Yosys 0.48+51 (git sha1 17a53b838, g++ 12.2.0-14 -fPIC -O3)
[TCL: yosys -import] Command name collision: found pre-existing command `cd' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `eval' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `exec' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `read' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `trace' -> skip.

1. Executing Verilog-2005 frontend: /cal/exterieurs/sagouzal-23/projse04/souhail-ait-fora/median/synthese/../src/MCE.sv
Parsing SystemVerilog input from `/cal/exterieurs/sagouzal-23/projse04/souhail-ait-fora/median/synthese/../src/MCE.sv' to AST representation.
Generating RTLIL representation for module `\MCE'.
Successfully finished Verilog frontend.

2. Executing Verilog-2005 frontend: /cal/exterieurs/sagouzal-23/projse04/souhail-ait-fora/median/synthese/../src/MED.sv
Parsing SystemVerilog input from `/cal/exterieurs/sagouzal-23/projse04/souhail-ait-fora/median/synthese/../src/MED.sv' to AST representation.
Generating RTLIL representation for module `\MED'.
Warning: Replacing memory \regs with list of registers. See /cal/exterieurs/sagouzal-23/projse04/souhail-ait-fora/median/synthese/../src/MED.sv:25
Successfully finished Verilog frontend.

3. Executing HIERARCHY pass (managing design hierarchy).

3.1. Analyzing design hierarchy..
Top module:  \MED
Used module:     \MCE
Parameter \WIDTH = 8

3.2. Executing AST frontend in derive mode using pre-parsed AST for module `\MCE'.
Parameter \WIDTH = 8
Generating RTLIL representation for module `$paramod\MCE\WIDTH=s32'00000000000000000000000000001000'.

3.3. Analyzing design hierarchy..
Top module:  \MED
Used module:     $paramod\MCE\WIDTH=s32'00000000000000000000000000001000

3.4. Analyzing design hierarchy..
Top module:  \MED
Used module:     $paramod\MCE\WIDTH=s32'00000000000000000000000000001000
Removing unused module `\MCE'.
Removed 1 unused modules.

4. Executing PREP pass.

4.1. Executing HIERARCHY pass (managing design hierarchy).
Attribute `top' found on module `MED'. Setting top module to MED.

4.1.1. Analyzing design hierarchy..
Top module:  \MED
Used module:     $paramod\MCE\WIDTH=s32'00000000000000000000000000001000

4.1.2. Analyzing design hierarchy..
Top module:  \MED
Used module:     $paramod\MCE\WIDTH=s32'00000000000000000000000000001000
Removed 0 unused modules.

4.2. Executing PROC pass (convert processes to netlists).

4.2.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

4.2.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed a total of 0 dead cases.

4.2.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 10 assignments to connections.

4.2.4. Executing PROC_INIT pass (extract init attributes).

4.2.5. Executing PROC_ARST pass (detect async resets in processes).

4.2.6. Executing PROC_ROM pass (convert switches to ROMs).
Converted 0 switches.

4.2.7. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\MED.$proc$/cal/exterieurs/sagouzal-23/projse04/souhail-ait-fora/median/synthese/../src/MED.sv:23$9'.

4.2.8. Executing PROC_DLATCH pass (convert process syncs to latches).

4.2.9. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\MED.$fordecl_block$5.i' using process `\MED.$proc$/cal/exterieurs/sagouzal-23/projse04/souhail-ait-fora/median/synthese/../src/MED.sv:23$9'.
  created $dff cell `$procdff$15' with positive edge clock.
Creating register for signal `\MED.\regs[0]' using process `\MED.$proc$/cal/exterieurs/sagouzal-23/projse04/souhail-ait-fora/median/synthese/../src/MED.sv:23$9'.
  created $dff cell `$procdff$16' with positive edge clock.
Creating register for signal `\MED.\regs[1]' using process `\MED.$proc$/cal/exterieurs/sagouzal-23/projse04/souhail-ait-fora/median/synthese/../src/MED.sv:23$9'.
  created $dff cell `$procdff$17' with positive edge clock.
Creating register for signal `\MED.\regs[2]' using process `\MED.$proc$/cal/exterieurs/sagouzal-23/projse04/souhail-ait-fora/median/synthese/../src/MED.sv:23$9'.
  created $dff cell `$procdff$18' with positive edge clock.
Creating register for signal `\MED.\regs[3]' using process `\MED.$proc$/cal/exterieurs/sagouzal-23/projse04/souhail-ait-fora/median/synthese/../src/MED.sv:23$9'.
  created $dff cell `$procdff$19' with positive edge clock.
Creating register for signal `\MED.\regs[4]' using process `\MED.$proc$/cal/exterieurs/sagouzal-23/projse04/souhail-ait-fora/median/synthese/../src/MED.sv:23$9'.
  created $dff cell `$procdff$20' with positive edge clock.
Creating register for signal `\MED.\regs[5]' using process `\MED.$proc$/cal/exterieurs/sagouzal-23/projse04/souhail-ait-fora/median/synthese/../src/MED.sv:23$9'.
  created $dff cell `$procdff$21' with positive edge clock.
Creating register for signal `\MED.\regs[6]' using process `\MED.$proc$/cal/exterieurs/sagouzal-23/projse04/souhail-ait-fora/median/synthese/../src/MED.sv:23$9'.
  created $dff cell `$procdff$22' with positive edge clock.
Creating register for signal `\MED.\regs[7]' using process `\MED.$proc$/cal/exterieurs/sagouzal-23/projse04/souhail-ait-fora/median/synthese/../src/MED.sv:23$9'.
  created $dff cell `$procdff$23' with positive edge clock.
Creating register for signal `\MED.\regs[8]' using process `\MED.$proc$/cal/exterieurs/sagouzal-23/projse04/souhail-ait-fora/median/synthese/../src/MED.sv:23$9'.
  created $dff cell `$procdff$24' with positive edge clock.

4.2.10. Executing PROC_MEMWR pass (convert process memory writes to cells).

4.2.11. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Removing empty process `MED.$proc$/cal/exterieurs/sagouzal-23/projse04/souhail-ait-fora/median/synthese/../src/MED.sv:23$9'.
Cleaned up 0 empty switches.

4.2.12. Executing OPT_EXPR pass (perform const folding).
Optimizing module MED.
Optimizing module $paramod\MCE\WIDTH=s32'00000000000000000000000000001000.

4.3. Executing FUTURE pass.

4.4. Executing OPT_EXPR pass (perform const folding).
Optimizing module MED.
Optimizing module $paramod\MCE\WIDTH=s32'00000000000000000000000000001000.

4.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \MED..
Finding unused cells or wires in module $paramod\MCE\WIDTH=s32'00000000000000000000000000001000..
Removed 1 unused cells and 15 unused wires.
<suppressed ~3 debug messages>

4.6. Executing CHECK pass (checking for obvious problems).
Checking module $paramod\MCE\WIDTH=s32'00000000000000000000000000001000...
Checking module MED...
Found and reported 0 problems.

4.7. Executing OPT pass (performing simple optimizations).

4.7.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\MCE\WIDTH=s32'00000000000000000000000000001000.
Optimizing module MED.

4.7.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\MCE\WIDTH=s32'00000000000000000000000000001000'.
<suppressed ~3 debug messages>
Finding identical cells in module `\MED'.
Removed a total of 1 cells.

4.7.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module $paramod\MCE\WIDTH=s32'00000000000000000000000000001000..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \MED..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~4 debug messages>

4.7.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module $paramod\MCE\WIDTH=s32'00000000000000000000000000001000.
  Optimizing cells in module \MED.
Performed a total of 0 changes.

4.7.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\MCE\WIDTH=s32'00000000000000000000000000001000'.
Finding identical cells in module `\MED'.
Removed a total of 0 cells.

4.7.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\MCE\WIDTH=s32'00000000000000000000000000001000..
Finding unused cells or wires in module \MED..
Removed 0 unused cells and 1 unused wires.
<suppressed ~1 debug messages>

4.7.7. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\MCE\WIDTH=s32'00000000000000000000000000001000.
Optimizing module MED.

4.7.8. Rerunning OPT passes. (Maybe there is more to do..)

4.7.9. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module $paramod\MCE\WIDTH=s32'00000000000000000000000000001000..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \MED..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~4 debug messages>

4.7.10. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module $paramod\MCE\WIDTH=s32'00000000000000000000000000001000.
  Optimizing cells in module \MED.
Performed a total of 0 changes.

4.7.11. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\MCE\WIDTH=s32'00000000000000000000000000001000'.
Finding identical cells in module `\MED'.
Removed a total of 0 cells.

4.7.12. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\MCE\WIDTH=s32'00000000000000000000000000001000..
Finding unused cells or wires in module \MED..

4.7.13. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\MCE\WIDTH=s32'00000000000000000000000000001000.
Optimizing module MED.

4.7.14. Finished OPT passes. (There is nothing left to do.)

4.8. Executing WREDUCE pass (reducing word size of cells).

4.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\MCE\WIDTH=s32'00000000000000000000000000001000..
Finding unused cells or wires in module \MED..

4.10. Executing MEMORY_COLLECT pass (generating $mem cells).

4.11. Executing OPT pass (performing simple optimizations).

4.11.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\MCE\WIDTH=s32'00000000000000000000000000001000.
Optimizing module MED.

4.11.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\MCE\WIDTH=s32'00000000000000000000000000001000'.
Finding identical cells in module `\MED'.
Removed a total of 0 cells.

4.11.3. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\MCE\WIDTH=s32'00000000000000000000000000001000..
Finding unused cells or wires in module \MED..

4.11.4. Finished fast OPT passes.

4.12. Printing statistics.

=== $paramod\MCE\WIDTH=s32'00000000000000000000000000001000 ===

   Number of wires:                  5
   Number of wire bits:             33
   Number of public wires:           4
   Number of public wire bits:      32
   Number of ports:                  4
   Number of port bits:             32
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  3
     $gt                             1
     $mux                            2

=== MED ===

   Number of wires:                 20
   Number of wire bits:            139
   Number of public wires:          20
   Number of public wire bits:     139
   Number of ports:                  5
   Number of port bits:             19
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 12
     $dff                            9
     $mux                            2
     $paramod\MCE\WIDTH=s32'00000000000000000000000000001000      1

=== design hierarchy ===

   MED                               1
     $paramod\MCE\WIDTH=s32'00000000000000000000000000001000      1

   Number of wires:                 25
   Number of wire bits:            172
   Number of public wires:          24
   Number of public wire bits:     171
   Number of ports:                  9
   Number of port bits:             51
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 14
     $dff                            9
     $gt                             1
     $mux                            4

4.13. Executing CHECK pass (checking for obvious problems).
Checking module $paramod\MCE\WIDTH=s32'00000000000000000000000000001000...
Checking module MED...
Found and reported 0 problems.

5. Executing JSON backend.

6. Executing SYNTH_INTEL_ALM pass.

6.1. Executing Verilog-2005 frontend: /comelec/softs/opt/yosys/current/bin/../share/yosys/intel_alm/cyclonev/cells_sim.v
Parsing SystemVerilog input from `/comelec/softs/opt/yosys/current/bin/../share/yosys/intel_alm/cyclonev/cells_sim.v' to AST representation.
Generating RTLIL representation for module `\VCC'.
Generating RTLIL representation for module `\GND'.
Generating RTLIL representation for module `\cyclonev_io_ibuf'.
Generating RTLIL representation for module `\cyclonev_io_obuf'.
Generating RTLIL representation for module `\cyclonev_lcell_comb'.
Generating RTLIL representation for module `\dffeas'.
Successfully finished Verilog frontend.

6.2. Executing Verilog-2005 frontend: /comelec/softs/opt/yosys/current/bin/../share/yosys/intel_alm/common/alm_sim.v
Parsing Verilog input from `/comelec/softs/opt/yosys/current/bin/../share/yosys/intel_alm/common/alm_sim.v' to AST representation.
Generating RTLIL representation for module `\MISTRAL_ALUT6'.
Generating RTLIL representation for module `\MISTRAL_ALUT5'.
Generating RTLIL representation for module `\MISTRAL_ALUT4'.
Generating RTLIL representation for module `\MISTRAL_ALUT3'.
Generating RTLIL representation for module `\MISTRAL_ALUT2'.
Generating RTLIL representation for module `\MISTRAL_NOT'.
Generating RTLIL representation for module `\MISTRAL_ALUT_ARITH'.
Successfully finished Verilog frontend.

6.3. Executing Verilog-2005 frontend: /comelec/softs/opt/yosys/current/bin/../share/yosys/intel_alm/common/dff_sim.v
Parsing Verilog input from `/comelec/softs/opt/yosys/current/bin/../share/yosys/intel_alm/common/dff_sim.v' to AST representation.
Generating RTLIL representation for module `\MISTRAL_FF'.
Successfully finished Verilog frontend.

6.4. Executing Verilog-2005 frontend: /comelec/softs/opt/yosys/current/bin/../share/yosys/intel_alm/common/dsp_sim.v
Parsing Verilog input from `/comelec/softs/opt/yosys/current/bin/../share/yosys/intel_alm/common/dsp_sim.v' to AST representation.
Generating RTLIL representation for module `\MISTRAL_MUL27X27'.
Generating RTLIL representation for module `\MISTRAL_MUL18X18'.
Generating RTLIL representation for module `\MISTRAL_MUL9X9'.
Successfully finished Verilog frontend.

6.5. Executing Verilog-2005 frontend: /comelec/softs/opt/yosys/current/bin/../share/yosys/intel_alm/common/mem_sim.v
Parsing Verilog input from `/comelec/softs/opt/yosys/current/bin/../share/yosys/intel_alm/common/mem_sim.v' to AST representation.
Generating RTLIL representation for module `\MISTRAL_MLAB'.
Generating RTLIL representation for module `\MISTRAL_M10K'.
Successfully finished Verilog frontend.

6.6. Executing Verilog-2005 frontend: /comelec/softs/opt/yosys/current/bin/../share/yosys/intel_alm/common/misc_sim.v
Parsing Verilog input from `/comelec/softs/opt/yosys/current/bin/../share/yosys/intel_alm/common/misc_sim.v' to AST representation.
Generating RTLIL representation for module `\MISTRAL_IB'.
Generating RTLIL representation for module `\MISTRAL_OB'.
Generating RTLIL representation for module `\MISTRAL_IO'.
Generating RTLIL representation for module `\MISTRAL_CLKBUF'.
Successfully finished Verilog frontend.

6.7. Executing Verilog-2005 frontend: /comelec/softs/opt/yosys/current/bin/../share/yosys/intel_alm/common/abc9_model.v
Parsing Verilog input from `/comelec/softs/opt/yosys/current/bin/../share/yosys/intel_alm/common/abc9_model.v' to AST representation.
Generating RTLIL representation for module `$__MISTRAL_FF_SYNCONLY'.
Successfully finished Verilog frontend.

6.8. Executing Verilog-2005 frontend: /comelec/softs/opt/yosys/current/bin/../share/yosys/intel/common/altpll_bb.v
Parsing Verilog input from `/comelec/softs/opt/yosys/current/bin/../share/yosys/intel/common/altpll_bb.v' to AST representation.
Successfully finished Verilog frontend.

6.9. Executing Verilog-2005 frontend: /comelec/softs/opt/yosys/current/bin/../share/yosys/intel_alm/common/megafunction_bb.v
Parsing Verilog input from `/comelec/softs/opt/yosys/current/bin/../share/yosys/intel_alm/common/megafunction_bb.v' to AST representation.
Generating RTLIL representation for module `\altera_pll'.
Generating RTLIL representation for module `\altera_std_synchronizer'.
Generating RTLIL representation for module `\altddio_in'.
Generating RTLIL representation for module `\altddio_out'.
Generating RTLIL representation for module `\altddio_bidir'.
Generating RTLIL representation for module `\altiobuf_in'.
Generating RTLIL representation for module `\altiobuf_out'.
Generating RTLIL representation for module `\altiobuf_bidir'.
Generating RTLIL representation for module `\altsyncram'.
Generating RTLIL representation for module `\cyclonev_mlab_cell'.
Generating RTLIL representation for module `\cyclonev_mac'.
Generating RTLIL representation for module `\cyclone10gx_mac'.
Generating RTLIL representation for module `\cyclonev_ram_block'.
Generating RTLIL representation for module `\cyclone10gx_io_ibuf'.
Generating RTLIL representation for module `\cyclone10gx_io_obuf'.
Generating RTLIL representation for module `\cyclonev_clkena'.
Generating RTLIL representation for module `\cyclone10gx_clkena'.
Generating RTLIL representation for module `\cyclonev_oscillator'.
Generating RTLIL representation for module `\cyclonev_hps_interface_mpu_general_purpose'.
Successfully finished Verilog frontend.

6.10. Executing HIERARCHY pass (managing design hierarchy).
Attribute `top' found on module `MED'. Setting top module to MED.

6.10.1. Analyzing design hierarchy..
Top module:  \MED
Used module:     $paramod\MCE\WIDTH=s32'00000000000000000000000000001000

6.10.2. Analyzing design hierarchy..
Top module:  \MED
Used module:     $paramod\MCE\WIDTH=s32'00000000000000000000000000001000
Removed 0 unused modules.

6.11. Executing PROC pass (convert processes to netlists).

6.11.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

6.11.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 1 switch rules as full_case in process $proc$/comelec/softs/opt/yosys/current/bin/../share/yosys/intel_alm/common/mem_sim.v:65$114 in module MISTRAL_MLAB.
Marked 3 switch rules as full_case in process $proc$/comelec/softs/opt/yosys/current/bin/../share/yosys/intel_alm/common/dff_sim.v:86$89 in module MISTRAL_FF.
Removed a total of 0 dead cases.

6.11.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 5 assignments to connections.

6.11.4. Executing PROC_INIT pass (extract init attributes).
Found init rule in `\MISTRAL_MLAB.$proc$/comelec/softs/opt/yosys/current/bin/../share/yosys/intel_alm/common/mem_sim.v:49$127'.
  Set init value: \mem = 0
Found init rule in `\MISTRAL_FF.$proc$/comelec/softs/opt/yosys/current/bin/../share/yosys/intel_alm/common/dff_sim.v:0$91'.
  Set init value: \Q = 1'0

6.11.5. Executing PROC_ARST pass (detect async resets in processes).
Found async reset \ACLR in `\MISTRAL_FF.$proc$/comelec/softs/opt/yosys/current/bin/../share/yosys/intel_alm/common/dff_sim.v:86$89'.

6.11.6. Executing PROC_ROM pass (convert switches to ROMs).
Converted 0 switches.
<suppressed ~4 debug messages>

6.11.7. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\MISTRAL_MLAB.$proc$/comelec/softs/opt/yosys/current/bin/../share/yosys/intel_alm/common/mem_sim.v:49$127'.
Creating decoders for process `\MISTRAL_MLAB.$proc$/comelec/softs/opt/yosys/current/bin/../share/yosys/intel_alm/common/mem_sim.v:65$114'.
     1/2: $1$lookahead\mem$113[31:0]$118
     2/2: $1$bitselwrite$pos$/comelec/softs/opt/yosys/current/bin/../share/yosys/intel_alm/common/mem_sim.v:66$112[4:0]$117
Creating decoders for process `\MISTRAL_FF.$proc$/comelec/softs/opt/yosys/current/bin/../share/yosys/intel_alm/common/dff_sim.v:0$91'.
Creating decoders for process `\MISTRAL_FF.$proc$/comelec/softs/opt/yosys/current/bin/../share/yosys/intel_alm/common/dff_sim.v:86$89'.
     1/1: $0\Q[0:0]

6.11.8. Executing PROC_DLATCH pass (convert process syncs to latches).

6.11.9. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\MISTRAL_MLAB.\mem' using process `\MISTRAL_MLAB.$proc$/comelec/softs/opt/yosys/current/bin/../share/yosys/intel_alm/common/mem_sim.v:65$114'.
  created $dff cell `$procdff$143' with positive edge clock.
Creating register for signal `\MISTRAL_MLAB.$bitselwrite$pos$/comelec/softs/opt/yosys/current/bin/../share/yosys/intel_alm/common/mem_sim.v:66$112' using process `\MISTRAL_MLAB.$proc$/comelec/softs/opt/yosys/current/bin/../share/yosys/intel_alm/common/mem_sim.v:65$114'.
  created $dff cell `$procdff$144' with positive edge clock.
Creating register for signal `\MISTRAL_MLAB.$lookahead\mem$113' using process `\MISTRAL_MLAB.$proc$/comelec/softs/opt/yosys/current/bin/../share/yosys/intel_alm/common/mem_sim.v:65$114'.
  created $dff cell `$procdff$145' with positive edge clock.
Creating register for signal `\MISTRAL_FF.\Q' using process `\MISTRAL_FF.$proc$/comelec/softs/opt/yosys/current/bin/../share/yosys/intel_alm/common/dff_sim.v:86$89'.
  created $adff cell `$procdff$150' with positive edge clock and positive level reset.

6.11.10. Executing PROC_MEMWR pass (convert process memory writes to cells).

6.11.11. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Removing empty process `MISTRAL_MLAB.$proc$/comelec/softs/opt/yosys/current/bin/../share/yosys/intel_alm/common/mem_sim.v:49$127'.
Found and cleaned up 1 empty switch in `\MISTRAL_MLAB.$proc$/comelec/softs/opt/yosys/current/bin/../share/yosys/intel_alm/common/mem_sim.v:65$114'.
Removing empty process `MISTRAL_MLAB.$proc$/comelec/softs/opt/yosys/current/bin/../share/yosys/intel_alm/common/mem_sim.v:65$114'.
Removing empty process `MISTRAL_FF.$proc$/comelec/softs/opt/yosys/current/bin/../share/yosys/intel_alm/common/dff_sim.v:0$91'.
Found and cleaned up 3 empty switches in `\MISTRAL_FF.$proc$/comelec/softs/opt/yosys/current/bin/../share/yosys/intel_alm/common/dff_sim.v:86$89'.
Removing empty process `MISTRAL_FF.$proc$/comelec/softs/opt/yosys/current/bin/../share/yosys/intel_alm/common/dff_sim.v:86$89'.
Cleaned up 4 empty switches.

6.11.12. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\MCE\WIDTH=s32'00000000000000000000000000001000.
Optimizing module MED.

6.12. Executing FLATTEN pass (flatten design).
Deleting now unused module $paramod\MCE\WIDTH=s32'00000000000000000000000000001000.
<suppressed ~1 debug messages>

6.13. Executing TRIBUF pass.

6.14. Executing DEMINOUT pass (demote inout ports to input or output).

6.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module MED.

6.16. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \MED..

6.17. Executing CHECK pass (checking for obvious problems).
Checking module MED...
Found and reported 0 problems.

6.18. Executing OPT pass (performing simple optimizations).

6.18.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module MED.

6.18.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\MED'.
Removed a total of 0 cells.

6.18.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \MED..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~2 debug messages>

6.18.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \MED.
Performed a total of 0 changes.

6.18.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\MED'.
Removed a total of 0 cells.

6.18.6. Executing OPT_DFF pass (perform DFF optimizations).

6.18.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \MED..

6.18.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module MED.

6.18.9. Finished OPT passes. (There is nothing left to do.)

6.19. Executing FSM pass (extract and optimize FSM).

6.19.1. Executing FSM_DETECT pass (finding FSMs in design).

6.19.2. Executing FSM_EXTRACT pass (extracting FSM from design).

6.19.3. Executing FSM_OPT pass (simple optimizations of FSMs).

6.19.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \MED..

6.19.5. Executing FSM_OPT pass (simple optimizations of FSMs).

6.19.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

6.19.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

6.19.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

6.20. Executing OPT pass (performing simple optimizations).

6.20.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module MED.

6.20.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\MED'.
Removed a total of 0 cells.

6.20.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \MED..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~2 debug messages>

6.20.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \MED.
Performed a total of 0 changes.

6.20.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\MED'.
Removed a total of 0 cells.

6.20.6. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on $procdff$24 ($dff) from module MED (D = \O_MUX2, Q = \regs[8]).

6.20.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \MED..

6.20.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module MED.

6.20.9. Rerunning OPT passes. (Maybe there is more to do..)

6.20.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \MED..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~2 debug messages>

6.20.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \MED.
Performed a total of 0 changes.

6.20.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\MED'.
Removed a total of 0 cells.

6.20.13. Executing OPT_DFF pass (perform DFF optimizations).

6.20.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \MED..

6.20.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module MED.

6.20.16. Finished OPT passes. (There is nothing left to do.)

6.21. Executing WREDUCE pass (reducing word size of cells).

6.22. Executing PEEPOPT pass (run peephole optimizers).

6.23. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \MED..

6.24. Executing SHARE pass (SAT-based resource sharing).

6.25. Executing TECHMAP pass (map to technology primitives).

6.25.1. Executing Verilog-2005 frontend: /comelec/softs/opt/yosys/current/bin/../share/yosys/cmp2lut.v
Parsing Verilog input from `/comelec/softs/opt/yosys/current/bin/../share/yosys/cmp2lut.v' to AST representation.
Generating RTLIL representation for module `\_90_lut_cmp_'.
Successfully finished Verilog frontend.

6.25.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~36 debug messages>

6.26. Executing OPT_EXPR pass (perform const folding).
Optimizing module MED.

6.27. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \MED..

6.28. Executing TECHMAP pass (map to technology primitives).

6.28.1. Executing Verilog-2005 frontend: /comelec/softs/opt/yosys/current/bin/../share/yosys/mul2dsp.v
Parsing Verilog input from `/comelec/softs/opt/yosys/current/bin/../share/yosys/mul2dsp.v' to AST representation.
Generating RTLIL representation for module `\_80_mul'.
Generating RTLIL representation for module `\_90_soft_mul'.
Successfully finished Verilog frontend.

6.28.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~4 debug messages>

6.29. Executing TECHMAP pass (map to technology primitives).

6.29.1. Executing Verilog-2005 frontend: /comelec/softs/opt/yosys/current/bin/../share/yosys/mul2dsp.v
Parsing Verilog input from `/comelec/softs/opt/yosys/current/bin/../share/yosys/mul2dsp.v' to AST representation.
Generating RTLIL representation for module `\_80_mul'.
Generating RTLIL representation for module `\_90_soft_mul'.
Successfully finished Verilog frontend.

6.29.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~4 debug messages>

6.30. Executing TECHMAP pass (map to technology primitives).

6.30.1. Executing Verilog-2005 frontend: /comelec/softs/opt/yosys/current/bin/../share/yosys/mul2dsp.v
Parsing Verilog input from `/comelec/softs/opt/yosys/current/bin/../share/yosys/mul2dsp.v' to AST representation.
Generating RTLIL representation for module `\_80_mul'.
Generating RTLIL representation for module `\_90_soft_mul'.
Successfully finished Verilog frontend.

6.30.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~4 debug messages>

6.31. Executing TECHMAP pass (map to technology primitives).

6.31.1. Executing Verilog-2005 frontend: /comelec/softs/opt/yosys/current/bin/../share/yosys/mul2dsp.v
Parsing Verilog input from `/comelec/softs/opt/yosys/current/bin/../share/yosys/mul2dsp.v' to AST representation.
Generating RTLIL representation for module `\_80_mul'.
Generating RTLIL representation for module `\_90_soft_mul'.
Successfully finished Verilog frontend.

6.31.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~4 debug messages>

6.32. Executing TECHMAP pass (map to technology primitives).

6.32.1. Executing Verilog-2005 frontend: /comelec/softs/opt/yosys/current/bin/../share/yosys/mul2dsp.v
Parsing Verilog input from `/comelec/softs/opt/yosys/current/bin/../share/yosys/mul2dsp.v' to AST representation.
Generating RTLIL representation for module `\_80_mul'.
Generating RTLIL representation for module `\_90_soft_mul'.
Successfully finished Verilog frontend.

6.32.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~4 debug messages>

6.33. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module MED:
  creating $alu model for $flatten\I_MCE.$gt$/cal/exterieurs/sagouzal-23/projse04/souhail-ait-fora/median/synthese/../src/MCE.sv:8$11 ($gt): new $alu
  creating $alu cell for $flatten\I_MCE.$gt$/cal/exterieurs/sagouzal-23/projse04/souhail-ait-fora/median/synthese/../src/MCE.sv:8$11: $auto$alumacc.cc:485:replace_alu$157
  created 1 $alu and 0 $macc cells.

6.34. Executing IOPADMAP pass (mapping inputs/outputs to IO-PAD cells).
Mapping port MED.BYP using MISTRAL_IB.
Mapping port MED.CLK using MISTRAL_IB.
Mapping port MED.DI using MISTRAL_IB.
Mapping port MED.DO using MISTRAL_OB.
Mapping port MED.DSI using MISTRAL_IB.

6.35. Executing TECHMAP pass (map to technology primitives).

6.35.1. Executing Verilog-2005 frontend: /comelec/softs/opt/yosys/current/bin/../share/yosys/intel_alm/common/arith_alm_map.v
Parsing Verilog input from `/comelec/softs/opt/yosys/current/bin/../share/yosys/intel_alm/common/arith_alm_map.v' to AST representation.
Generating RTLIL representation for module `\$alu'.
Successfully finished Verilog frontend.

6.35.2. Executing Verilog-2005 frontend: /comelec/softs/opt/yosys/current/bin/../share/yosys/intel_alm/common/dsp_map.v
Parsing Verilog input from `/comelec/softs/opt/yosys/current/bin/../share/yosys/intel_alm/common/dsp_map.v' to AST representation.
Generating RTLIL representation for module `\__MUL27X27'.
Generating RTLIL representation for module `\__MUL18X18'.
Generating RTLIL representation for module `\__MUL9X9'.
Successfully finished Verilog frontend.

6.35.3. Continuing TECHMAP pass.
Using template $paramod$09c2da2fd80113fcc7c84f56882b37fd4f3eecea\$alu for cells of type $alu.
No more expansions possible.
<suppressed ~30 debug messages>

6.36. Executing OPT pass (performing simple optimizations).

6.36.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module MED.
<suppressed ~3 debug messages>

6.36.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\MED'.
Removed a total of 0 cells.

6.36.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \MED..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~2 debug messages>

6.36.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \MED.
Performed a total of 0 changes.

6.36.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\MED'.
Removed a total of 0 cells.

6.36.6. Executing OPT_DFF pass (perform DFF optimizations).

6.36.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \MED..
Removed 42 unused cells and 59 unused wires.
<suppressed ~45 debug messages>

6.36.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module MED.

6.36.9. Rerunning OPT passes. (Maybe there is more to do..)

6.36.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \MED..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~2 debug messages>

6.36.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \MED.
Performed a total of 0 changes.

6.36.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\MED'.
Removed a total of 0 cells.

6.36.13. Executing OPT_DFF pass (perform DFF optimizations).

6.36.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \MED..

6.36.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module MED.

6.36.16. Finished OPT passes. (There is nothing left to do.)

6.37. Executing MEMORY pass.

6.37.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

6.37.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 0 transformations.

6.37.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).

6.37.4. Executing MEMORY_BMUX2ROM pass (converting muxes to ROMs).

6.37.5. Executing MEMORY_DFF pass (merging $dff cells to $memrd).

6.37.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \MED..

6.37.7. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

6.37.8. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

6.37.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \MED..

6.37.10. Executing MEMORY_COLLECT pass (generating $mem cells).

6.38. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \MED..

6.39. Executing MEMORY_BRAM pass (mapping $mem cells to block memories).

6.40. Executing TECHMAP pass (map to technology primitives).

6.40.1. Executing Verilog-2005 frontend: /comelec/softs/opt/yosys/current/bin/../share/yosys/intel_alm/common/bram_m10k_map.v
Parsing Verilog input from `/comelec/softs/opt/yosys/current/bin/../share/yosys/intel_alm/common/bram_m10k_map.v' to AST representation.
Generating RTLIL representation for module `\$__MISTRAL_M10K'.
Successfully finished Verilog frontend.

6.40.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~3 debug messages>

6.41. Executing MEMORY_BRAM pass (mapping $mem cells to block memories).

6.42. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).

6.43. Executing OPT pass (performing simple optimizations).

6.43.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module MED.
<suppressed ~2 debug messages>

6.43.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\MED'.
Removed a total of 0 cells.

6.43.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \MED..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~1 debug messages>

6.43.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \MED.
Performed a total of 0 changes.

6.43.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\MED'.
Removed a total of 0 cells.

6.43.6. Executing OPT_SHARE pass.

6.43.7. Executing OPT_DFF pass (perform DFF optimizations).

6.43.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \MED..

6.43.9. Executing OPT_EXPR pass (perform const folding).
Optimizing module MED.

6.43.10. Finished OPT passes. (There is nothing left to do.)

6.44. Executing TECHMAP pass (map to technology primitives).

6.44.1. Executing Verilog-2005 frontend: /comelec/softs/opt/yosys/current/bin/../share/yosys/techmap.v
Parsing Verilog input from `/comelec/softs/opt/yosys/current/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu_brent_kung'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

6.44.2. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $dff.
Using extmapper simplemap for cells of type $mux.
Using extmapper simplemap for cells of type $dffe.
Using extmapper simplemap for cells of type $ne.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $reduce_and.
Using extmapper simplemap for cells of type $or.
Using extmapper simplemap for cells of type $logic_or.
Using extmapper simplemap for cells of type $logic_and.
Using extmapper simplemap for cells of type $xor.
No more expansions possible.
<suppressed ~97 debug messages>

6.45. Executing DFFLEGALIZE pass (convert FFs to types supported by the target).

6.46. Executing TECHMAP pass (map to technology primitives).

6.46.1. Executing Verilog-2005 frontend: /comelec/softs/opt/yosys/current/bin/../share/yosys/intel_alm/common/dff_map.v
Parsing Verilog input from `/comelec/softs/opt/yosys/current/bin/../share/yosys/intel_alm/common/dff_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFFE_PN0P_'.
Generating RTLIL representation for module `\$_SDFFCE_PP0P_'.
Successfully finished Verilog frontend.

6.46.2. Continuing TECHMAP pass.
Using template \$_SDFFCE_PP0P_ for cells of type $_SDFFCE_PP0P_.
No more expansions possible.
<suppressed ~76 debug messages>

6.47. Executing OPT pass (performing simple optimizations).

6.47.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module MED.
<suppressed ~3 debug messages>

6.47.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\MED'.
Removed a total of 0 cells.

6.47.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \MED..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

6.47.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \MED.
Performed a total of 0 changes.

6.47.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\MED'.
Removed a total of 0 cells.

6.47.6. Executing OPT_SHARE pass.

6.47.7. Executing OPT_DFF pass (perform DFF optimizations).

6.47.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \MED..
Removed 1 unused cells and 437 unused wires.
<suppressed ~2 debug messages>

6.47.9. Executing OPT_EXPR pass (perform const folding).
Optimizing module MED.

6.47.10. Rerunning OPT passes. (Maybe there is more to do..)

6.47.11. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \MED..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

6.47.12. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \MED.
Performed a total of 0 changes.

6.47.13. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\MED'.
Removed a total of 0 cells.

6.47.14. Executing OPT_SHARE pass.

6.47.15. Executing OPT_DFF pass (perform DFF optimizations).

6.47.16. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \MED..

6.47.17. Executing OPT_EXPR pass (perform const folding).
Optimizing module MED.

6.47.18. Finished OPT passes. (There is nothing left to do.)
Removed 0 unused cells and 8 unused wires.

6.48. Executing CLKBUFMAP pass (inserting clock buffers).
Inserting MISTRAL_CLKBUF on MED.$iopadmap$CLK[0].

6.49. Executing TECHMAP pass (map to technology primitives).

6.49.1. Executing Verilog-2005 frontend: /comelec/softs/opt/yosys/current/bin/../share/yosys/intel_alm/common/abc9_map.v
Parsing Verilog input from `/comelec/softs/opt/yosys/current/bin/../share/yosys/intel_alm/common/abc9_map.v' to AST representation.
Generating RTLIL representation for module `\MISTRAL_FF'.
Successfully finished Verilog frontend.

6.49.2. Continuing TECHMAP pass.
Using template $paramod\MISTRAL_FF\_TECHMAP_CONSTMSK_ACLR_=1'1 for cells of type MISTRAL_FF.
No more expansions possible.
<suppressed ~86 debug messages>

6.50. Executing ABC9 pass.

6.50.1. Executing ABC9_OPS pass (helper functions for ABC9).

6.50.2. Executing ABC9_OPS pass (helper functions for ABC9).

6.50.3. Executing SCC pass (detecting logic loops).
Found 0 SCCs in module MED.
Found 0 SCCs.

6.50.4. Executing ABC9_OPS pass (helper functions for ABC9).

6.50.5. Executing PROC pass (convert processes to netlists).

6.50.5.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

6.50.5.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed a total of 0 dead cases.

6.50.5.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 0 assignments to connections.

6.50.5.4. Executing PROC_INIT pass (extract init attributes).

6.50.5.5. Executing PROC_ARST pass (detect async resets in processes).

6.50.5.6. Executing PROC_ROM pass (convert switches to ROMs).
Converted 0 switches.

6.50.5.7. Executing PROC_MUX pass (convert decision trees to multiplexers).

6.50.5.8. Executing PROC_DLATCH pass (convert process syncs to latches).

6.50.5.9. Executing PROC_DFF pass (convert process syncs to FFs).

6.50.5.10. Executing PROC_MEMWR pass (convert process memory writes to cells).

6.50.5.11. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

6.50.5.12. Executing OPT_EXPR pass (perform const folding).

6.50.6. Executing TECHMAP pass (map to technology primitives).

6.50.6.1. Executing Verilog-2005 frontend: /comelec/softs/opt/yosys/current/bin/../share/yosys/techmap.v
Parsing Verilog input from `/comelec/softs/opt/yosys/current/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu_brent_kung'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

6.50.6.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~119 debug messages>

6.50.7. Executing OPT pass (performing simple optimizations).

6.50.7.1. Executing OPT_EXPR pass (perform const folding).

6.50.7.2. Executing OPT_MERGE pass (detect identical cells).
Removed a total of 0 cells.

6.50.7.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Removed 0 multiplexer ports.

6.50.7.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
Performed a total of 0 changes.

6.50.7.5. Executing OPT_MERGE pass (detect identical cells).
Removed a total of 0 cells.

6.50.7.6. Executing OPT_DFF pass (perform DFF optimizations).

6.50.7.7. Executing OPT_CLEAN pass (remove unused cells and wires).

6.50.7.8. Executing OPT_EXPR pass (perform const folding).

6.50.7.9. Finished OPT passes. (There is nothing left to do.)

6.50.8. Executing TECHMAP pass (map to technology primitives).

6.50.8.1. Executing Verilog-2005 frontend: /comelec/softs/opt/yosys/current/bin/../share/yosys/abc9_map.v
Parsing Verilog input from `/comelec/softs/opt/yosys/current/bin/../share/yosys/abc9_map.v' to AST representation.
Successfully finished Verilog frontend.

6.50.8.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~2 debug messages>

6.50.9. Executing Verilog-2005 frontend: /comelec/softs/opt/yosys/current/bin/../share/yosys/abc9_model.v
Parsing Verilog input from `/comelec/softs/opt/yosys/current/bin/../share/yosys/abc9_model.v' to AST representation.
Generating RTLIL representation for module `$__ABC9_DELAY'.
Generating RTLIL representation for module `$__ABC9_SCC_BREAKER'.
Generating RTLIL representation for module `$__DFF_N__$abc9_flop'.
Generating RTLIL representation for module `$__DFF_P__$abc9_flop'.
Successfully finished Verilog frontend.

6.50.10. Executing ABC9_OPS pass (helper functions for ABC9).
<suppressed ~2 debug messages>

6.50.11. Executing ABC9_OPS pass (helper functions for ABC9).

6.50.12. Executing ABC9_OPS pass (helper functions for ABC9).
<suppressed ~2 debug messages>

6.50.13. Executing TECHMAP pass (map to technology primitives).

6.50.13.1. Executing Verilog-2005 frontend: /comelec/softs/opt/yosys/current/bin/../share/yosys/techmap.v
Parsing Verilog input from `/comelec/softs/opt/yosys/current/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu_brent_kung'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

6.50.13.2. Continuing TECHMAP pass.
Using template $paramod\MISTRAL_ALUT_ARITH\LUT0=16'1010101010101010\LUT1=16'0000000000000000 for cells of type $paramod\MISTRAL_ALUT_ARITH\LUT0=16'1010101010101010\LUT1=16'0000000000000000.
Using template $paramod\MISTRAL_ALUT_ARITH\LUT0=16'1010101010101010\LUT1=16'1100001111000011 for cells of type $paramod\MISTRAL_ALUT_ARITH\LUT0=16'1010101010101010\LUT1=16'1100001111000011.
Running "alumacc" on wrapper $extern:wrap:$add:Y_WIDTH=2:B_WIDTH=1:A_WIDTH=2:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$add:Y_WIDTH=2:B_WIDTH=1:A_WIDTH=2:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$add:Y_WIDTH=2:B_WIDTH=1:A_WIDTH=2:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$add:Y_WIDTH=2:B_WIDTH=2:A_WIDTH=1:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$add:Y_WIDTH=2:B_WIDTH=2:A_WIDTH=1:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$add:Y_WIDTH=2:B_WIDTH=2:A_WIDTH=1:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using extmapper simplemap for cells of type $logic_not.
Using template $paramod$constmap:da78d05fe2a90a9c124545790c51474a3466d748$paramod$e31da3c1e7d1078ed1477dabeabe646dcd7d3c9b\_90_shift_ops_shr_shl_sshl_sshr for cells of type $shr.
Analyzing pattern of constant bits for this cell:
  Constant input on bit 0 of port A: 1'0
  Constant input on bit 1 of port A: 1'1
  Constant input on bit 2 of port A: 1'0
  Constant input on bit 3 of port A: 1'1
  Constant input on bit 4 of port A: 1'0
  Constant input on bit 5 of port A: 1'1
  Constant input on bit 6 of port A: 1'0
  Constant input on bit 7 of port A: 1'1
  Constant input on bit 8 of port A: 1'0
  Constant input on bit 9 of port A: 1'1
  Constant input on bit 10 of port A: 1'0
  Constant input on bit 11 of port A: 1'1
  Constant input on bit 12 of port A: 1'0
  Constant input on bit 13 of port A: 1'1
  Constant input on bit 14 of port A: 1'0
  Constant input on bit 15 of port A: 1'1
Creating constmapped module `$paramod$constmap:debecbbf3717e0f4c680abc85cfc533019b210d7$paramod$e31da3c1e7d1078ed1477dabeabe646dcd7d3c9b\_90_shift_ops_shr_shl_sshl_sshr'.

6.50.13.12. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module $paramod$constmap:debecbbf3717e0f4c680abc85cfc533019b210d7$paramod$e31da3c1e7d1078ed1477dabeabe646dcd7d3c9b\_90_shift_ops_shr_shl_sshl_sshr..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.
<suppressed ~501 debug messages>

6.50.13.13. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod$constmap:debecbbf3717e0f4c680abc85cfc533019b210d7$paramod$e31da3c1e7d1078ed1477dabeabe646dcd7d3c9b\_90_shift_ops_shr_shl_sshl_sshr.
<suppressed ~149 debug messages>
Removed 0 unused cells and 12 unused wires.
Using template $paramod$constmap:debecbbf3717e0f4c680abc85cfc533019b210d7$paramod$e31da3c1e7d1078ed1477dabeabe646dcd7d3c9b\_90_shift_ops_shr_shl_sshl_sshr for cells of type $shr.
Analyzing pattern of constant bits for this cell:
  Constant input on bit 0 of port A: 1'1
  Constant input on bit 1 of port A: 1'1
  Constant input on bit 2 of port A: 1'0
  Constant input on bit 3 of port A: 1'0
  Constant input on bit 4 of port A: 1'0
  Constant input on bit 5 of port A: 1'0
  Constant input on bit 6 of port A: 1'1
  Constant input on bit 7 of port A: 1'1
  Constant input on bit 8 of port A: 1'1
  Constant input on bit 9 of port A: 1'1
  Constant input on bit 10 of port A: 1'0
  Constant input on bit 11 of port A: 1'0
  Constant input on bit 12 of port A: 1'0
  Constant input on bit 13 of port A: 1'0
  Constant input on bit 14 of port A: 1'1
  Constant input on bit 15 of port A: 1'1
Creating constmapped module `$paramod$constmap:56b8783ba577858eda421dc9a52b6c51029bfb42$paramod$e31da3c1e7d1078ed1477dabeabe646dcd7d3c9b\_90_shift_ops_shr_shl_sshl_sshr'.

6.50.13.14. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module $paramod$constmap:56b8783ba577858eda421dc9a52b6c51029bfb42$paramod$e31da3c1e7d1078ed1477dabeabe646dcd7d3c9b\_90_shift_ops_shr_shl_sshl_sshr..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.
<suppressed ~4 debug messages>

6.50.13.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod$constmap:56b8783ba577858eda421dc9a52b6c51029bfb42$paramod$e31da3c1e7d1078ed1477dabeabe646dcd7d3c9b\_90_shift_ops_shr_shl_sshl_sshr.
<suppressed ~147 debug messages>
Removed 0 unused cells and 12 unused wires.
Using template $paramod$constmap:56b8783ba577858eda421dc9a52b6c51029bfb42$paramod$e31da3c1e7d1078ed1477dabeabe646dcd7d3c9b\_90_shift_ops_shr_shl_sshl_sshr for cells of type $shr.
Using template $paramod$175e67c02b86e96b1288b9dc100122520d7240d8\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $xor.
Using extmapper simplemap for cells of type $and.
Using template $paramod\_90_lcu_brent_kung\WIDTH=32'00000000000000000000000000000010 for cells of type $lcu.
Using extmapper simplemap for cells of type $pos.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $or.
No more expansions possible.
<suppressed ~180 debug messages>

6.50.14. Executing OPT pass (performing simple optimizations).

6.50.14.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module MED.
<suppressed ~48 debug messages>

6.50.14.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\MED'.
<suppressed ~219 debug messages>
Removed a total of 73 cells.

6.50.14.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \MED..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

6.50.14.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \MED.
Performed a total of 0 changes.

6.50.14.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\MED'.
Removed a total of 0 cells.

6.50.14.6. Executing OPT_DFF pass (perform DFF optimizations).

6.50.14.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \MED..
Removed 60 unused cells and 186 unused wires.
<suppressed ~61 debug messages>

6.50.14.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module MED.
<suppressed ~1 debug messages>

6.50.14.9. Rerunning OPT passes. (Maybe there is more to do..)

6.50.14.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \MED..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

6.50.14.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \MED.
Performed a total of 0 changes.

6.50.14.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\MED'.
Removed a total of 0 cells.

6.50.14.13. Executing OPT_DFF pass (perform DFF optimizations).

6.50.14.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \MED..
Removed 0 unused cells and 1 unused wires.
<suppressed ~1 debug messages>

6.50.14.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module MED.

6.50.14.16. Rerunning OPT passes. (Maybe there is more to do..)

6.50.14.17. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \MED..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

6.50.14.18. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \MED.
Performed a total of 0 changes.

6.50.14.19. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\MED'.
Removed a total of 0 cells.

6.50.14.20. Executing OPT_DFF pass (perform DFF optimizations).

6.50.14.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \MED..

6.50.14.22. Executing OPT_EXPR pass (perform const folding).
Optimizing module MED.

6.50.14.23. Finished OPT passes. (There is nothing left to do.)

6.50.15. Executing AIGMAP pass (map logic to AIG).
Module MED: replaced 6 cells with 42 new cells, skipped 30 cells.
  replaced 2 cell types:
       5 $_XOR_
       1 $_MUX_
  not replaced 3 cell types:
      24 $specify2
       3 $_NOT_
       3 $_AND_

6.50.16. Executing AIGMAP pass (map logic to AIG).
Module MED: replaced 30 cells with 198 new cells, skipped 120 cells.
  replaced 3 cell types:
       4 $_OR_
      10 $_XOR_
      16 $_MUX_
  not replaced 9 cell types:
       1 $scopeinfo
       9 $_NOT_
       9 $_AND_
       1 $paramod\MISTRAL_ALUT_ARITH\LUT0=16'1010101010101010\LUT1=16'0000000000000000
      11 MISTRAL_IB
       8 MISTRAL_OB
       1 MISTRAL_CLKBUF
      72 $__MISTRAL_FF_SYNCONLY
       8 $paramod\MISTRAL_ALUT_ARITH\LUT0=16'1010101010101010\LUT1=16'1100001111000011

6.50.16.1. Executing ABC9_OPS pass (helper functions for ABC9).

6.50.16.2. Executing ABC9_OPS pass (helper functions for ABC9).

6.50.16.3. Executing XAIGER backend.
<suppressed ~11 debug messages>
Extracted 91 AND gates and 339 wires from module `MED' to a netlist network with 103 inputs and 91 outputs.

6.50.16.4. Executing ABC9_EXE pass (technology mapping using ABC9).

6.50.16.5. Executing ABC9.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_lut <abc-temp-dir>/input.lut 
ABC: + read_box <abc-temp-dir>/input.box 
ABC: + &read <abc-temp-dir>/input.xaig 
ABC: + &ps 
ABC: <abc-temp-dir>/input : i/o =    103/     91  and =      89  lev =   11 (0.66)  mem = 0.01 MB  box = 9  bb = 0
ABC: + &scorr 
ABC: Warning: The network is combinational.
ABC: + &sweep 
ABC: + &dc2 
ABC: + &dch -f 
ABC: + &ps 
ABC: <abc-temp-dir>/input : i/o =    103/     91  and =     151  lev =   10 (0.59)  mem = 0.01 MB  ch =   20  box = 9  bb = 0
ABC: + &if -W 600 -v 
ABC: K = 6. Memory (bytes): Truth =    0. Cut =   60. Obj =  144. Set =  636. CutMin = no
ABC: Node =     151.  Ch =    19.  Total mem =    0.06 MB. Peak cut mem =    0.01 MB.
ABC: P:  Del = 3709.00.  Ar =      44.0.  Edge =      118.  Cut =     1036.  T =     0.00 sec
ABC: P:  Del = 3315.00.  Ar =      33.0.  Edge =      106.  Cut =     1172.  T =     0.00 sec
ABC: P:  Del = 3315.00.  Ar =      33.0.  Edge =      106.  Cut =     1377.  T =     0.00 sec
ABC: F:  Del = 3315.00.  Ar =      32.0.  Edge =      106.  Cut =     1364.  T =     0.00 sec
ABC: A:  Del = 3315.00.  Ar =      28.0.  Edge =       87.  Cut =     1375.  T =     0.00 sec
ABC: A:  Del = 3315.00.  Ar =      28.0.  Edge =       87.  Cut =     1446.  T =     0.00 sec
ABC: Total time =     0.00 sec
ABC: + &write -n <abc-temp-dir>/output.aig 
ABC: + &mfs 
ABC: + &ps -l 
ABC: <abc-temp-dir>/input : i/o =    103/     91  and =      86  lev =   12 (0.66)  mem = 0.01 MB  box = 9  bb = 0
ABC: Mapping (K=6)  :  lut =     14  edge =      70  lev =    3 (0.17)  Boxes are not in a topological order. Switching to level computation without boxes.
ABC: levB =   12  mem = 0.00 MB
ABC: LUT = 14 : 2=1 7.1 %  3=2 14.3 %  4=2 14.3 %  5=0 0.0 %  6=9 64.3 %  Ave = 5.00
ABC: + &write -n <abc-temp-dir>/output.aig 
ABC: + time 
ABC: elapse: 0.06 seconds, total: 0.06 seconds

6.50.16.6. Executing AIGER frontend.
<suppressed ~400 debug messages>
Removed 145 unused cells and 420 unused wires.

6.50.16.7. Executing ABC9_OPS pass (helper functions for ABC9).
ABC RESULTS:              $lut cells:       14
ABC RESULTS:   $paramod\MISTRAL_ALUT_ARITH\LUT0=16'1010101010101010\LUT1=16'0000000000000000 cells:        1
ABC RESULTS:   $paramod\MISTRAL_ALUT_ARITH\LUT0=16'1010101010101010\LUT1=16'1100001111000011 cells:        8
ABC RESULTS:           input signals:        7
ABC RESULTS:          output signals:       14
Removing temp directory.

6.50.17. Executing TECHMAP pass (map to technology primitives).

6.50.17.1. Executing Verilog-2005 frontend: /comelec/softs/opt/yosys/current/bin/../share/yosys/abc9_unmap.v
Parsing Verilog input from `/comelec/softs/opt/yosys/current/bin/../share/yosys/abc9_unmap.v' to AST representation.
Generating RTLIL representation for module `\$__DFF_x__$abc9_flop'.
Generating RTLIL representation for module `\$__ABC9_SCC_BREAKER'.
Successfully finished Verilog frontend.

6.50.17.2. Continuing TECHMAP pass.
Using template $paramod\MISTRAL_ALUT_ARITH\LUT0=16'1010101010101010\LUT1=16'0000000000000000 for cells of type $paramod\MISTRAL_ALUT_ARITH\LUT0=16'1010101010101010\LUT1=16'0000000000000000.
Using template $paramod\MISTRAL_ALUT_ARITH\LUT0=16'1010101010101010\LUT1=16'1100001111000011 for cells of type $paramod\MISTRAL_ALUT_ARITH\LUT0=16'1010101010101010\LUT1=16'1100001111000011.
No more expansions possible.
<suppressed ~16 debug messages>

6.51. Executing TECHMAP pass (map to technology primitives).

6.51.1. Executing Verilog-2005 frontend: /comelec/softs/opt/yosys/current/bin/../share/yosys/intel_alm/common/abc9_unmap.v
Parsing Verilog input from `/comelec/softs/opt/yosys/current/bin/../share/yosys/intel_alm/common/abc9_unmap.v' to AST representation.
Generating RTLIL representation for module `\$__MISTRAL_FF_SYNCONLY'.
Successfully finished Verilog frontend.

6.51.2. Continuing TECHMAP pass.
Using template \$__MISTRAL_FF_SYNCONLY for cells of type $__MISTRAL_FF_SYNCONLY.
No more expansions possible.
<suppressed ~75 debug messages>

6.52. Executing TECHMAP pass (map to technology primitives).

6.52.1. Executing Verilog-2005 frontend: /comelec/softs/opt/yosys/current/bin/../share/yosys/intel_alm/common/alm_map.v
Parsing Verilog input from `/comelec/softs/opt/yosys/current/bin/../share/yosys/intel_alm/common/alm_map.v' to AST representation.
Generating RTLIL representation for module `\$lut'.
Successfully finished Verilog frontend.

6.52.2. Continuing TECHMAP pass.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000010\LUT=4'0110 for cells of type $lut.
Using template $paramod$d2b5e7b5429639878c0a614cf001753581eebd9c\$lut for cells of type $lut.
Using template $paramod$3a9313dba25b0fa21b49f27dd166f9628fa5da59\$lut for cells of type $lut.
Using template $paramod$16c334e1576d5c0c8107857349a21b8d3e218afe\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'11010000 for cells of type $lut.
Using template $paramod$402752d5b365aa387ce033d1495ebf91f93bb0c0\$lut for cells of type $lut.
Using template $paramod$61d5e4deccf9d8dd2256bc5af62b782d82e4e3ee\$lut for cells of type $lut.
Using template $paramod$6bd5d19e8fb9cd3bfb7a31d319bb3c9eb74457cf\$lut for cells of type $lut.
Using template $paramod$06c0b3fb1450f66def4dd2c0b2d6c454dbd251c4\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'00000100 for cells of type $lut.
Using template $paramod$0bdbfb079a19302bd0bfbc7d7f48ded592c1d055\$lut for cells of type $lut.
Using template $paramod$e57bcb018bfe8170bc04f13a73befe2def28cdf3\$lut for cells of type $lut.
Using template $paramod$5120fbec474c3990ef34db15c60b68d0c1865789\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'11111011 for cells of type $lut.
Using template $paramod$04365f3f7f0374f0a8985070cbc8a12499005726\$lut for cells of type $lut.
Using template $paramod$387a07b30475113f2932006ce6883d8f4a92a89b\$lut for cells of type $lut.
Using template $paramod$560beaa7844c33d50281010c4a6cf8e22994fdfb\$lut for cells of type $lut.
Using template $paramod$e4c3984b0f292ec38c153e6818d5f5a1c58e4f5f\$lut for cells of type $lut.
Using template $paramod$4a063e4ac5dab55b560c727fd936dafed86658f3\$lut for cells of type $lut.
No more expansions possible.
<suppressed ~273 debug messages>

6.53. Executing OPT pass (performing simple optimizations).

6.53.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module MED.

6.53.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\MED'.
Removed a total of 0 cells.

6.53.3. Executing OPT_DFF pass (perform DFF optimizations).

6.53.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \MED..
Removed 9 unused cells and 1539 unused wires.
<suppressed ~11 debug messages>

6.53.5. Finished fast OPT passes.

6.54. Executing AUTONAME pass.
Renamed 422 objects in module MED (33 iterations).
<suppressed ~145 debug messages>

6.55. Executing HIERARCHY pass (managing design hierarchy).
Attribute `top' found on module `MED'. Setting top module to MED.

6.55.1. Analyzing design hierarchy..
Top module:  \MED

6.55.2. Analyzing design hierarchy..
Top module:  \MED
Removed 0 unused modules.

6.56. Printing statistics.

=== MED ===

   Number of wires:                 45
   Number of wire bits:            176
   Number of public wires:          45
   Number of public wire bits:     176
   Number of ports:                  5
   Number of port bits:             19
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                116
     $scopeinfo                      1
     MISTRAL_ALUT2                   1
     MISTRAL_ALUT3                   2
     MISTRAL_ALUT4                   2
     MISTRAL_ALUT6                   9
     MISTRAL_ALUT_ARITH              9
     MISTRAL_CLKBUF                  1
     MISTRAL_FF                     72
     MISTRAL_IB                     11
     MISTRAL_OB                      8

6.57. Executing CHECK pass (checking for obvious problems).
Checking module MED...
Found and reported 0 problems.

7. Executing JSON backend.

8. Executing Verilog backend.

8.1. Executing BMUXMAP pass.

8.2. Executing DEMUXMAP pass.
Dumping module `\MED'.

Warnings: 1 unique messages, 1 total
End of script. Logfile hash: 2ac25f308c, CPU: user 0.48s system 0.04s, MEM: 32.05 MB peak
Yosys 0.48+51 (git sha1 17a53b838, g++ 12.2.0-14 -fPIC -O3)
Time spent: 19% 42x read_verilog (0 sec), 13% 17x techmap (0 sec), ...
